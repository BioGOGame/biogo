}
bib <- paste0(bib, "\n\n")
}
}
}
cat(bib, file = path_bib)
cites <- sort(cites, decreasing = T)
hindex <- 0
for(i in 1:length(cites)){
if(i <= cites[i]) hindex <- hindex+1
}
mess <- "------------------------------------\n"
mess <- paste0(mess, "published articles = ",published,"\n")
mess <- paste0(mess, "h-index = ",hindex,"\n")
mess <- paste0(mess, "total citations = ",sum(cites),"\n")
mess <- paste0(mess, "average citations = ",round(mean(cites)),"\n")
mess <- paste0(mess, "median citations = ",median(cites),"\n")
mess <- paste0(mess, "average fcr = ",round(mean(fcrs)),"\n")
mess <- paste0(mess, "median fcr = ",median(fcrs),"\n")
mess <- paste0(mess, "average rcr = ",mean(rcrs),"\n")
mess <- paste0(mess, "median rcr = ",median(rcrs),"\n")
mess <- paste0(mess, "invitation to conferences = ",invited,"\n")
message(mess)
library(yaml)
library(bibtex)
library(rjson)
library(rorcid)
# orcid <- "0000-0002-5883-4572"
# out$`external-ids.external-id`[[1]]$`external-id-value`
# (out <- works(orcid_id(orcid)))
# orcid_works(orcid = orcid)
# out$`external-ids`
path_pubs <- "https://raw.githubusercontent.com/guillaumelobet/guillaumelobet.github.io/master/_data/publications.yml"
path_pres <- "https://raw.githubusercontent.com/guillaumelobet/guillaumelobet.github.io/master/_data/presentations.yml"
path_bib <-"~/Desktop/bib.txt"
print_num <- T
print_title <- T
print_authors <- T
print_first_author <- T
print_info <- T
print_doi <- T
print_journal <- T
min_year <- 2008
pubs <- read_yaml(path_pubs)
pres <- read_yaml(path_pres)
art_count <- 1
bib <- ""
tot_papers <- 0
tot_papers_2014 <- 0
for(p in pubs){
if(p$type == "journal"){
if(length(p$doi) > 0){
if(p$year >= min_year){
tot_papers <- tot_papers + 1
if(p$year >= 2014){
tot_papers_2014 <- tot_papers_2014 + 1
}
}
}
}
}
tot_pres <-0
for(p in pres){
year <- strsplit(p$date, " ")[[1]][2]
if(as.numeric(year) >= min_year){
tot_pres <- tot_pres + 1
}
}
bib <- " ----------------- PREPRINTS --------------------\n "
cites <-c()
for(p in pubs){
if(p$type == "journal"){
if(length(p$preprint) > 0){
if(p$year >= min_year){
print(p$title)
if(print_num) bib <- paste0(bib ,"[",tot_papers,"]  ")
if(print_title) bib <- paste0(bib ,p$title,", ")
if(print_authors) bib <- paste0(bib, p$authors, "")
if(print_first_author){
auth <- strsplit(strsplit(p$authors, ",")[[1]], " ")[[1]][1]
bib <- paste0(bib, auth, "")
}
if(print_journal) bib <- paste0(bib, ", ", p$journal)
bib <- paste0(bib, " (",p$year,") ")
tot_papers <- tot_papers - 1
dims <- NULL
altm <- NULL
if(length(p$doi) > 0){
if(print_info){
altm <- tryCatch({
fromJSON(readLines(paste0("https://api.altmetric.com/v1/doi/",p$doi)))
}, error = function(e) {
})
dims <- tryCatch({
fromJSON(readLines(paste0("https://metrics-api.dimensions.ai/doi/",p$doi)))
}, error = function(e) {
})
if(!is.null(altm)){
bib <- paste0(bib, "[altmetric = ",round(altm$score),"] ")
}else{
bib <- paste0(bib, "[altmetric =-] ")
}
if(!is.null(dims)){
bib <- paste0(bib, "[citations = ",dims$times_cited,"] ")
if(2018 - p$year > 2) bib <- paste0(bib, "[fcr = ",dims$field_citation_ratio,"] ")
cites <-c(cites, dims$times_cited)
journals <-c(journals, p$journal)
years <-c(years, p$year)
}else{
bib <- paste0(bib, "[citations = 0] ")
if(2018 - p$year > 2) bib <- paste0(bib, "[fcr = 0] ")
}
}
if(print_doi) bib <- paste0(bib, " - [http://dx.doi.org/",p$doi,"][PREPRINT] \n\n\n")
}
art_count <- art_count + 1
}
}
}
}
bib <- paste0(bib, "\n\n ----------------- PUBLISHED ARTICLES -------------------- \n\n")
cites <-c()
fcrs <-c()
rcrs <-c()
published <- 0
journals <- c()
years <- c()
for(p in pubs){
if(p$type == "journal"){
if(length(p$preprint) == 0){
if(length(p$doi) > 0){
if(p$year >= min_year){
print(p$title)
if(print_num) bib <- paste0(bib ,"[",tot_papers,"]  ")
if(print_title) bib <- paste0(bib ,p$title,", ")
if(print_authors) bib <- paste0(bib, p$authors, "")
if(print_first_author){
auth <- strsplit(strsplit(p$authors, ",")[[1]], " ")[[1]][1]
bib <- paste0(bib, auth, "")
}
if(print_journal) bib <- paste0(bib, ", ", p$journal)
bib <- paste0(bib, " (",p$year,") ")
tot_papers <- tot_papers - 1
dims <- NULL
altm <- NULL
if(length(p$doi) > 0){
if(print_info){
altm <- tryCatch({
fromJSON(readLines(paste0("https://api.altmetric.com/v1/doi/",p$doi)))
}, error = function(e) {
})
dims <- tryCatch({
fromJSON(readLines(paste0("https://metrics-api.dimensions.ai/doi/",p$doi)))
}, error = function(e) {
})
if(!is.null(altm)){
bib <- paste0(bib, "[altmetric = ",round(altm$score),"] ")
}else{
bib <- paste0(bib, "[-] ")
}
if(!is.null(dims)){
bib <- paste0(bib, "[citations = ",dims$times_cited,"] ")
if(2018 - p$year > 2) bib <- paste0(bib, "[fcr = ",dims$field_citation_ratio,"] ")
cites <-c(cites, dims$times_cited)
fcrs <-c(fcrs, dims$field_citation_ratio)
rcrs <-c(rcrs, dims$relative_citation_ratio)
journals <-c(journals, p$journal)
years <-c(years, p$year)
}else{
bib <- paste0(bib, "[citations = 0] ")
if(2018 - p$year > 2) bib <- paste0(bib, "[fcr = 0] ")
}
}
if(print_doi) bib <- paste0(bib, "- [http://dx.doi.org/",p$doi,"]")
bib <- paste0(bib, "\n\n\n")
}
published <- published + 1
}
}
}
}
}
bib <- paste0(bib, "\n\n  ----------------- INVITED CONFERENCES -------------------- %%%\n\n")
invited <- 0
for(p in pres){
if(length(p$status) > 0){
year <- strsplit(p$date, " ")[[1]][2]
if(as.numeric(year) >= min_year){
print(p$title)
invited <- invited + 1
loc <- paste0(strsplit(p$location, ",")[[1]][2],", ",strsplit(p$location, ",")[[1]][3])
conf <- strsplit(p$location, ",")[[1]][1]
if(print_num) bib <- paste0(bib ,"[",tot_pres,"]  ")
tot_pres <- tot_pres-1
bib <- paste0(bib ,p$title,", Lobet, G")
bib <- paste0(bib, " (",year,") ")
bib <- paste0(bib, conf,", ")
bib <- paste0(bib, loc, " ")
if(length(p$slides_url) > 0){
bib <-paste0(bib, "[",p$slides_url,"]")
}
bib <- paste0(bib, "[INVITED]\n\n")
}
}
}
bib <- paste0(bib, "\n\n %%% ----------------- CONFERENCES -------------------- %%%\n\n")
for(p in pres){
if(length(p$status) == 0){
year <- strsplit(p$date, " ")[[1]][2]
if(as.numeric(year) >= min_year){
print(p$title)
loc <- paste0(strsplit(p$location, ",")[[1]][2],", ",strsplit(p$location, ",")[[1]][3])
conf <- strsplit(p$location, ",")[[1]][1]
if(print_num) bib <- paste0(bib ,"[",tot_pres,"]  ")
tot_pres <- tot_pres-1
bib <- paste0(bib ,p$title,", Lobet, G")
bib <- paste0(bib, " (",year,") ")
bib <- paste0(bib, conf,", ")
bib <- paste0(bib, loc, " ")
if(length(p$slides_url) > 0){
bib <-paste0(bib, "[",p$slides_url,"]")
}
bib <- paste0(bib, "\n\n")
}
}
}
cat(bib, file = path_bib)
cites <- sort(cites, decreasing = T)
hindex <- 0
for(i in 1:length(cites)){
if(i <= cites[i]) hindex <- hindex+1
}
mess <- "------------------------------------\n"
mess <- paste0(mess, "published articles = ",published,"\n")
mess <- paste0(mess, "h-index = ",hindex,"\n")
mess <- paste0(mess, "total citations = ",sum(cites),"\n")
mess <- paste0(mess, "average citations = ",round(mean(cites)),"\n")
mess <- paste0(mess, "median citations = ",median(cites),"\n")
mess <- paste0(mess, "average fcr = ",round(mean(fcrs)),"\n")
mess <- paste0(mess, "median fcr = ",median(fcrs),"\n")
mess <- paste0(mess, "average rcr = ",mean(rcrs),"\n")
mess <- paste0(mess, "median rcr = ",median(rcrs),"\n")
mess <- paste0(mess, "invitation to conferences = ",invited,"\n")
message(mess)
library(yaml)
library(rjson)
library(googlesheets)
# orcid <- "0000-0002-5883-4572"
# out$`external-ids.external-id`[[1]]$`external-id-value`
# (out <- works(orcid_id(orcid)))
# orcid_works(orcid = orcid)
# out$`external-ids`
path_pubs <- "https://raw.githubusercontent.com/guillaumelobet/guillaumelobet.github.io/master/_data/publications.yml"
path_pres <- "https://raw.githubusercontent.com/guillaumelobet/guillaumelobet.github.io/master/_data/presentations.yml"
ti <- gs_title("Bibliographic data")
bib_gs <- gs_read(ti, ws = 1)
print_num <- F
print_title <- T
print_authors <- T
print_first_author <- F
print_info <- T
print_doi <- T
print_journal <- F
min_year <- 2008
pubs <- read_yaml(path_pubs)
pres <- read_yaml(path_pres)
art_count <- 1
bib <- ""
tot_papers <- 0
tot_papers_2014 <- 0
for(p in pubs){
if(p$type == "journal"){
if(length(p$doi) > 0){
if(p$year >= min_year){
tot_papers <- tot_papers + 1
if(p$year >= 2014){
tot_papers_2014 <- tot_papers_2014 + 1
}
}
}
}
}
tot_pres <-0
for(p in pres){
year <- strsplit(p$date, " ")[[1]][2]
if(as.numeric(year) >= min_year){
tot_pres <- tot_pres + 1
}
}
cites <-c()
fcrs <-c()
rcrs <-c()
journals <- c()
years <- c()
published <- 0
for(p in pubs){
if(p$type == "journal"){
# if(length(p$preprint) == 0){
if(length(p$doi) > 0){
if(p$year >= min_year){
bib <- ""
print(p$title)
if(print_num) bib <- paste0(bib ,"[",tot_papers,"]  ")
if(print_title) bib <- paste0(bib ,p$title,", ")
if(print_authors) bib <- paste0(bib, p$authors, "")
if(print_first_author){
auth <- strsplit(strsplit(p$authors, ",")[[1]], " ")[[1]][1]
bib <- paste0(bib, auth, "")
}
if(print_journal) bib <- paste0(bib, ", ", p$journal)
bib <- paste0(bib, " (",p$year,") ")
if(print_doi) bib <- paste0(bib, "- [http://dx.doi.org/",p$doi,"]")
tot_papers <- tot_papers - 1
dims <- NULL
altm <- NULL
if(length(p$doi) > 0){
if(print_info){
bib_dat <- ""
altm <- tryCatch({
fromJSON(readLines(paste0("https://api.altmetric.com/v1/doi/",p$doi)))
}, error = function(e) {
})
dims <- tryCatch({
fromJSON(readLines(paste0("https://metrics-api.dimensions.ai/doi/",p$doi)))
}, error = function(e) {
})
if(!is.null(altm)){
bib_dat <- paste0(bib_dat, "[altmetric = ",round(altm$score),"] ")
}else{
bib_dat <- paste0(bib_dat, "[-] ")
}
if(!is.null(dims)){
bib_dat <- paste0(bib_dat, "[citations = ",dims$times_cited,"] ")
if(2018 - p$year > 2) bib_dat <- paste0(bib_dat, "[fcr = ",dims$field_citation_ratio,"] ")
cites <-c(cites, dims$times_cited)
fcrs <-c(fcrs, dims$field_citation_ratio)
rcrs <-c(rcrs, dims$relative_citation_ratio)
journals <-c(journals, p$journal)
years <-c(years, p$year)
}else{
bib_dat <- paste0(bib_dat, "[citations = 0] ")
if(2018 - p$year > 2) bib_dat <- paste0(bib_dat, "[fcr = 0] ")
}
}
}
published <- published + 1
gs_edit_cells(ti, ws = "Sheet1", anchor = paste0("A",published), input = bib, byrow = TRUE)
gs_edit_cells(ti, ws = "Sheet1", anchor = paste0("B",published), input = bib_dat, byrow = TRUE)
}
}
# }
}
}
cites <- sort(cites, decreasing = T)
hindex <- 0
for(i in 1:length(cites)){
if(i <= cites[i]) hindex <- hindex+1
}
mess <- "------------------------------------\n"
mess <- paste0(mess, "published articles = ",published,"\n")
mess <- paste0(mess, "h-index = ",hindex,"\n")
mess <- paste0(mess, "total citations = ",sum(cites),"\n")
mess <- paste0(mess, "average citations = ",round(mean(cites)),"\n")
mess <- paste0(mess, "median citations = ",median(cites),"\n")
mess <- paste0(mess, "average fcr = ",round(mean(fcrs)),"\n")
mess <- paste0(mess, "median fcr = ",median(fcrs),"\n")
mess <- paste0(mess, "average rcr = ",mean(rcrs),"\n")
mess <- paste0(mess, "median rcr = ",median(rcrs),"\n")
message(mess)
iris()
iris
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
# Get the tables from the database
con <- dbConnect(RSQLite::SQLite(), "www/database.sql")
all_quests  <- dbReadTable(con, "quests")
runApp()
#--------------------------------------------------
# SETUP DATABASE
con <- dbConnect(RSQLite::SQLite(), "www/database.sql")
ti <- gs_title("LBIR1151 - Questions ")
library(RSQLite)
library(DBI)
library(googlesheets)
library(tidyverse)
library(rjson)
ti <- gs_title("LBIR1151 - Questions ")
users <- gs_read(ti, ws = 5)
dbWriteTable(con, "users", users, overwrite = TRUE)
runApp()
ti <- gs_title("LBIR1151 - Questions ")
params <- gs_read(ti, ws = 9)
dbWriteTable(con, "params", params, overwrite = TRUE)
all_params  <- dbReadTable(con, "params")
runApp()
runApp()
runApp()
#--------------------------------------------------
# BOUNTIES TABLE
# Get the list of bounties from google sheet
ti <- gs_title("LBIR1151 - Questions ")
bounties <- gs_read(ti, ws = 6)
dbWriteTable(con, "bounties", bounties, overwrite = TRUE)
library(tidyverse)
library(cowplot)
rs <- read_csv("~/Downloads/all_simulations.csv")
View(rs)
young <- rs %>%
filter(time < 10)
ggplot(rs) +
geom_segment(aes(x = x1, y = z1, xend = x2, yend = z2, colour = factor(type))) +
facet_wrap(~simulation, scales="free")
ggplot(rs) +
geom_segment(aes(x = x1, y = z1, xend = x2, yend = z2, colour = factor(organ))) +
facet_wrap(~simulation, scales="free")
ggplot(rs) +
geom_segment(aes(x = x1, y = z1, xend = x2, yend = z2, colour = time)) +
facet_wrap(~simulation, scales="free")
ggplot(young) +
geom_segment(aes(x = x1, y = z1, xend = x2, yend = z2, colour = factor(type))) +
facet_wrap(~simulation, scales="free")
rs %>%
filter(time == 10) %>%
ggplot() +
geom_segment(aes(x = x1, y = z1, xend = x2, yend = z2, colour = factor(organ))) +
facet_wrap(~simulation, scales="free")
rs %>%
filter(time == 10)
rs %>%
filter(time == 20) %>%
ggplot() +
geom_segment(aes(x = x1, y = z1, xend = x2, yend = z2, colour = factor(organ))) +
facet_wrap(~simulation, scales="free")
pl1 <- rs %>%
filter(simulation == "0_new.xml")
pl2 <- rs %>%
filter(simulation == "1_new.xml")
rbind(pl1, pl2) %>%
ggplot() +
geom_segment(aes(x = x1, y = z1, xend = x2, yend = z2, colour = simulation)) +
young <- rs %>%
filter(time < 10) # Filtrer les segments jeunes
rbind(pl1, pl2) %>%
ggplot() +
geom_segment(aes(x = x1, y = z1, xend = x2, yend = z2, colour = simulation))
temp <- rbind(pl1, pl2)
View(temp)
temp %>%
ggplot() +
geom_segment(aes(x = x1, y = z1, xend = x2, yend = z2, colour = simulation))
pl2 <- rs %>%
filter(simulation == "1_new.xml") %>%
mutate(x1 = x1+10) %>%
mutate(x2 = x2+10)
temp <- rbind(pl1, pl2)
temp %>%
ggplot() +
geom_segment(aes(x = x1, y = z1, xend = x2, yend = z2, colour = simulation))
# REQUIED LIBRARIES
library(RSQLite)
library(DBI)
library(googlesheets)
library(tidyverse)
library(rjson)
#--------------------------------------------------
# SETUP DATABASE
con <- dbConnect(RSQLite::SQLite(), "www/database.sql")
dbListTables(con)
ti <- gs_title("biogo_setup")
quests <- gs_read(ti, ws = 1)
dbWriteTable(con, "quests", quests, overwrite = TRUE)
shiny::runApp()
quests <- gs_read(ti, ws = 1)
dbWriteTable(con, "quests", quests, overwrite = TRUE)
runApp()
ti <- gs_title("LBIR1151 - Questions ")
params <- gs_read(ti, ws = 9)
dbWriteTable(con, "params", params, overwrite = TRUE)
runApp()
runApp()
runApp()
runApp()
ti <- gs_title("LBIR1151 - Questions ")
params <- gs_read(ti, ws = 9)
dbWriteTable(con, "params", params, overwrite = TRUE)
all_params  <- dbReadTable(con, "params")
max_found_quest <- all_params$value[all_params$param == "max_found_quest"] # min number of zones to visit
all_params
ti <- gs_title("biogo_setup")
params <- gs_read(ti, ws = 9)
params <- gs_read(ti, ws = 8)
dbWriteTable(con, "params", params, overwrite = TRUE)
runApp()
runApp()
runApp()
all_quests  <- dbReadTable(con, "quests")
View(all_quests)
runApp()
quests <- gs_read(ti, ws = 1)
quests <- gs_read(ti, ws = 1)
dbWriteTable(con, "quests", quests, overwrite = TRUE)
runApp()
